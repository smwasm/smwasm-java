/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.smwasm'
version = '0.1.2'

def currentTime = new Date()
println "--- current time --- ${currentTime} ---"
println "--- current dir --- ${project.projectDir} ---"

def repoTop

def osName = System.getProperty('os.name').toLowerCase()
if (osName.contains('windows')) {
    repoTop = "/git/ee"
} else if (osName.contains('linux')) {
    repoTop = "/home/jzr/repo"
}

def javaHome = "${System.getenv('JAVA_HOME')}"
def libPath = "-Djava.library.path=" + repoTop + "/smmo/other/java/maven/smwasm/lib/src/main/cpp"


sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
    }
}


def getGithubToken() {
    return new File('/temp/github.tkn').text.trim()
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


task buildJNI(type: Exec) {
    workingDir 'src/main/cpp'
    if (osName.contains('linux')) {
        commandLine 'g++', '-O3', '-DNDEBUG', '-shared', '-fpic', 'c_json.cpp', 'c_base.cpp', 'c_import.cpp', 'c_import1.cpp', 'c_import2.cpp', 'c_wasmdata.cpp', 'c_wasmengine.cpp', 'c_wasminstance.cpp',
        'c_wasmitem.cpp', 'c_wasmmodule.cpp', 'c_wasmstore.cpp', 'loadwasm.cpp', 'm_cpptest.cpp', 'wrap.cpp', '-I', repoTop + '/wasmtime/crates/c-api/include', '-I', repoTop + '/wasmtime/crates/c-api/wasm-c-api/include', '-I', javaHome + '/include', '-I',  javaHome + '/include/linux', repoTop + '/wasmtime/target/release/libwasmtime.a', '-lpthread', '-ldl', '-lm', '-o', 'libsmwasm.so'
    } else if (osName.contains('windows')) {
        commandLine 'g++', '-O3', '-DNDEBUG', '-shared', '-fpic', 'c_json.cpp', 'c_base.cpp', 'c_import.cpp', 'c_import1.cpp', 'c_import2.cpp', 'c_wasmdata.cpp', 'c_wasmengine.cpp', 'c_wasminstance.cpp',
        'c_wasmitem.cpp', 'c_wasmmodule.cpp', 'c_wasmstore.cpp', 'loadwasm.cpp', 'm_cpptest.cpp', 'wrap.cpp', '-I', repoTop + '/wasmtime/crates/c-api/include', '-I', repoTop + '/wasmtime/crates/c-api/wasm-c-api/include', '-I', javaHome + '/include', '-I',  javaHome + '/include/win32', repoTop + '/wasmtime/target/release/wasmtime.dll.lib', '-lpthread', '-lm', '-o', 'smwasm.dll'
    }
}
tasks.compileJava.dependsOn buildJNI


task cleanMine(type: Delete) {
    delete 'bin'
    delete 'build'
    delete fileTree('src/main/cpp').matching { include '**/*.dll' }
}
clean.dependsOn('cleanMine')

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'smwasm'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'smwasm'
                description = 'SmartModule & WebAssembly'
                url = 'https://github.com/smwasm/smwasm-java'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'smwasm'
                        name = 'smwasm'
                        email = 'smwasm@outlook.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:smwasm/smwasm-java.git'
                    developerConnection = 'scm:git:ssh@github.com:smwasm/smwasm-java.git'
                    url = 'https://github.com/smwasm/smwasm-java'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/smwasm/smwasm-java")
            credentials {
                username = 'smwasm'
                password = getGithubToken()
            }
        }
    }
}
